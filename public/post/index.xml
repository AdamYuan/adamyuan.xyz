<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on AdamYuan-&gt;Blog</title>
    <link>https://adamyuan.xyz/post/</link>
    <description>Recent content in Posts on AdamYuan-&gt;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2020 AdamYuan.</copyright>
    <lastBuildDate>Wed, 23 Jun 2021 13:43:26 +0800</lastBuildDate><atom:link href="https://adamyuan.xyz/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>为DWM添加窗口图标</title>
      <link>https://adamyuan.xyz/post/dwm_window_icon/</link>
      <pubDate>Wed, 23 Jun 2021 13:43:26 +0800</pubDate>
      
      <guid>https://adamyuan.xyz/post/dwm_window_icon/</guid>
      <description>前言 最近几天高考结束，分(huang)数(de)没(yi)出(pi)，闲在家里，于是折腾了一下DWM。DWM的动态平铺方式简单有效，无需I3WM那样繁琐的操作(对小屏幕尤其友好)。同时3000行左右的代码层次分明，简单易懂，其中dwm.c负责窗口的管理逻辑与界面更新、drw.c/.h提供基础绘制、config.h作为配置文件，只要有C语言基础便能轻松地根据自身需求进行修改，可拓展性极高。
原生的DWM不会在title bar显示窗口图标，总感觉缺了点味道。恰好DWM的底层Xlib中也有XImage类型、XCreateImage、XPutImage及XGetWindowProperty等函数可以获取窗口图标并储存、绘制，于是决定自己实现。
本人之前从未接触过Xlib相关的程序编写，对于一些概念的使用可能有误区，实现方式也未必最优，欢迎大家指正。
内存管理 在DWM中，每个窗口的数据是由结构体Client管理的，要想实现窗口图标，便要在Client结构体中添加图标的数据(直接加入一个XImage指针即可)，如图：
icon使用动态内存的方式管理，因此需要妥善进行分配与释放，防止内存泄露。
显然，窗口图标和窗口标题的处理方式十分相似，都要在窗口创建时初始化，也都可能触发更新，可以仿照DWM管理窗口标题的方式来处理窗口图标。
freeicon和updateicon 窗口图标使用了动态内存，于是首先在dwm.c新增一个freeicon函数用于释放，如下：
void freeicon(Client *c) { if (c-&amp;gt;icon) { XDestroyImage(c-&amp;gt;icon); c-&amp;gt;icon = NULL; } } 同时在dwm.c中，窗口标题的获取使用updatetitle函数实现，于是我们也添加一个updateicon函数，如下：
void updateicon(Client *c) { freeicon(c); // 都更新了当然要把旧图标先释放掉啊 	// 后面再写 } 修改manage和unmanage函数 dwm.c中，manage函数的功能为将新创建的窗口列入DWM的管理下，具体包括为窗口alloc一个Client，初始其标题、大小等信息。manage函数中调用了updatetitle，我们也照葫芦画瓢调用updateicon，如下：
void manage(Window w, XWindowAttributes *wa) { // ... 	c-&amp;gt;icon = NULL; updateicon(c); updatetitle(c); // ... } 而unmanage函数在窗口关闭或退出DWM时调用，负责销毁窗口的Client，我们在其中加入freeicon，如下：
void unmanage(Client *c, int destroyed) { // ... 	detachstack(c); freeicon(c); if (!destroyed) { // .</description>
    </item>
    
    <item>
      <title>模拟退火求解3-SAT的C&#43;&#43;程序实现</title>
      <link>https://adamyuan.xyz/post/sasat_implementation/</link>
      <pubDate>Sat, 15 Jun 2019 16:04:16 +0800</pubDate>
      
      <guid>https://adamyuan.xyz/post/sasat_implementation/</guid>
      <description>1. 问题概要与求解思路 1.1 3-SAT问题 对于一个形如$$(\overline{x_1} \lor x_2 \lor x_3) \land(x_3 \lor \overline{x_2} \lor \overline{x_4}) \land (x_1 \lor x_2 \lor x_5) \land &amp;hellip; \land (x_{10} \lor \overline{x_{12}} \lor x_{23})$$的布尔表达式。
将布尔条件中一个形如$$(x_1 \lor \overline{x_2} \lor x_4)$$的表达式称为一个括号。对于3-SAT问题，每个括号中只能有3个元素。
定义布尔变量数量为$$N_{var}$$，括号数量为$$N_{clause}$$，3-SAT问题的一个解$$s = (x_1, x_2, &amp;hellip;, x_{N_{var}}), x_k\in{0, 1}$$
3-SAT问题即求解一个$$s$$使布尔表达式为真。这是一个NP完全问题，作为Schaefer&amp;rsquo;s dichotomy定理的一个特例被Thomas Jerome Schaefer证明。
1.2 模拟退火 模拟退火是一个用于求解函数全局最大值的随机算法。与寻常的爬山法不同，模拟退火算法会在邻域内选取一个随机解，是否跳往随机解取决于温度和相对原解的函数值增加量。温度高时，跳转的随机程度大，温度降低后则大概率会跳向邻域内的最优，从而趋向局部最优。这种随机性使算法能够跳出局部最优，更可能寻找到全局最优。
Solution SimulatedAnnealing(Solution s0) { Solution s = s0; //s表示当前解，s0为其初始值 	double T = MAX_TEMP; //T为温度 	while (T &amp;gt; MIN_TEMP) { T = UpdateTemp(T); //更新(减小)温度 	Solution s_new = s.</description>
    </item>
    
    <item>
      <title>计算3的1000000次方</title>
      <link>https://adamyuan.xyz/post/big_pow/</link>
      <pubDate>Sun, 02 Dec 2018 11:39:34 +0800</pubDate>
      
      <guid>https://adamyuan.xyz/post/big_pow/</guid>
      <description>&lt;p&gt;无意间看到 &lt;a href=&#34;https://www.bilibili.com/video/av21610235&#34;&gt;https://www.bilibili.com/video/av21610235&lt;/a&gt; ，闲来无事，便自己实现了一个&lt;br&gt;
使用了快速幂和NTT，c++11，-O3优化，0.3秒内可得解&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>二逼平衡树(splay / vector &#43; 线段树)</title>
      <link>https://adamyuan.xyz/post/2b-pin-heng-shu/</link>
      <pubDate>Thu, 27 Sep 2018 21:21:54 +0800</pubDate>
      
      <guid>https://adamyuan.xyz/post/2b-pin-heng-shu/</guid>
      <description>题目概述 您需要写一种数据结构（可参考题目标题），来维护一个有序数列，其中需要提供以下操作：
 查询k在区间内的排名 查询区间内排名为k的值 修改某一位值上的数值 查询k在区间内的前驱（前驱定义为严格小于x，且最大的数，若不存在输出-2147483647） 查询k在区间内的后继（后继定义为严格大于x，且最小的数，若不存在输出2147483647）  基本思路 这是一道树套树（线段树套平衡树）的模板题，下面讲解一下5个操作的写法：
 分别查询区间对应的每个平衡树中k元素的排名，再相加 这个是最难想的，其实就是二分答案。。。可以线段树里再维护最大最小值加速二分 就是插入+删除 分别查询每颗平衡树中k的前驱，取最大 分别查询每颗平衡树中k的后继，取最小  操作3的复杂度为 $$\log^3(n)$$，其它为 $$\log^2(n)$$
吐槽 这题竟然可以线段树套std::vector水过，然而splay却会TLE 3个点。。。
代码 std::vector版（AC） #include &amp;lt;cstdio&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;vector&amp;gt; #define N 50005 #define MINV -2147483647 #define MAXV 2147483647  int arr[N]; inline int vec_query_rank(const std::vector&amp;lt;int&amp;gt; &amp;amp;vec, int x) { return std::lower_bound(vec.begin(), vec.end(), x) - vec.begin(); } inline int vec_query_prev(const std::vector&amp;lt;int&amp;gt; &amp;amp;vec, int x) { std::vector&amp;lt;int&amp;gt;::const_iterator i = std::lower_bound(vec.begin(), vec.end(), x); if(i == vec.</description>
    </item>
    
    <item>
      <title>文本编辑器editor(splay)</title>
      <link>https://adamyuan.xyz/post/wenbenbianjiqi-editor/</link>
      <pubDate>Thu, 20 Sep 2018 21:26:53 +0800</pubDate>
      
      <guid>https://adamyuan.xyz/post/wenbenbianjiqi-editor/</guid>
      <description>&lt;h1 id=&#34;题目概述&#34;&gt;题目概述&lt;/h1&gt;
&lt;p&gt;实现一个文本编辑器，实现下列功能：&lt;br&gt;
&lt;img src=&#34;https://adamyuan.xyz/img/wenbenbianjiqi-editor/1.gif&#34; alt=&#34;img1&#34;&gt;&lt;br&gt;
例子：&lt;br&gt;
&lt;img src=&#34;https://adamyuan.xyz/img/wenbenbianjiqi-editor/2.gif&#34; alt=&#34;img1&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;基本思路&#34;&gt;基本思路&lt;/h1&gt;
&lt;p&gt;（pos代表光标位置）
这题的思路十分简单粗暴，其中基本的操作是通过伸展树的splay操作得到代表一个区间的子树，对于区间[l, r]，将第l-1号节点splay成为根节点，将第r+1号节点splay成为根节点的右儿子，则根节点右儿子的左子树便是所需的子树。&lt;br&gt;
对于插入操作，可以先处理出[pos+1, pos]这个空区间（l-1 = pos, r+1 = pos+1），根节点右儿子的左子树必然为空，将其初始化为新字符串即可。&lt;br&gt;
对于删除和旋转操作，都需处理出[pos+1, pos+n]。删除操作可直接删除相应子树，旋转操作打上延迟标记然后pushdown。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>poj2104静态区间第k大(主席树)</title>
      <link>https://adamyuan.xyz/post/static-kth-number-hjt/</link>
      <pubDate>Thu, 30 Aug 2018 14:54:03 +0800</pubDate>
      
      <guid>https://adamyuan.xyz/post/static-kth-number-hjt/</guid>
      <description>&lt;h1 id=&#34;题目概述&#34;&gt;题目概述&lt;/h1&gt;
&lt;p&gt;给定一个数列(1 - 100000)，m次询问(1 - 5000)，每个询问包含l r k，输出区间[l&amp;hellip;r]中第k大的数。&lt;/p&gt;
&lt;h1 id=&#34;基本思路&#34;&gt;基本思路&lt;/h1&gt;
&lt;p&gt;首先我们将数列离散化。如果可以构造出任意区间的权值线段树(即线段树的下标代表区间中包含的数的值，例如数列1, 2, 2, 2, 3, 3, 4构成的权值线段树最下层为1, 3, 2, 1)，便能轻松二分出答案，同时区间[l&amp;hellip;r]的权值线段树可以由区间[1&amp;hellip;r]线段树中的值减去[1&amp;hellip;l-1]得到，所以想到构造n颗前缀权值线段树。&lt;br&gt;
不过暴力建树空间复杂度太大，必然会mle，这时就需要用到主席树了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>配置GVim</title>
      <link>https://adamyuan.xyz/post/configurate_gvim/</link>
      <pubDate>Wed, 18 Jul 2018 15:28:33 +0800</pubDate>
      
      <guid>https://adamyuan.xyz/post/configurate_gvim/</guid>
      <description>基本配置 编辑~/.gvimrc 加入
set guifont=Source\ Code\ Pro\ 12 &amp;#34;字体可随意更改set guioptions=i &amp;#34;只保留图标消除白色边框 gtk3 编辑 ~/.config/gtk-3.0/gtk.css，加入
window#vim-main-window { background-color: #272822; /*背景色*/ } gtk2 编辑 ~/.gtkrc-2.0，加入
style &amp;quot;vimfix&amp;quot; { bg[NORMAL] = &amp;quot;#272822&amp;quot; #背景色 GtkWindow::resize-grip-height = 0 GtkWindow::resize-grip-width = 0 } widget &amp;quot;vim-main-window.*GtkForm&amp;quot; style &amp;quot;vimfix&amp;quot; </description>
    </item>
    
    <item>
      <title>NetworkManager使用resolv.conf中设置的dns</title>
      <link>https://adamyuan.xyz/post/networkmanager_use_dns_in_resolv_conf/</link>
      <pubDate>Sat, 14 Jul 2018 10:10:17 +0800</pubDate>
      
      <guid>https://adamyuan.xyz/post/networkmanager_use_dns_in_resolv_conf/</guid>
      <description>NetworkManager只能分别为每个连接设置公共dns，同时重写/etc/resolv.conf中的设置，这里提供一种让系统使用/etc/resolv.conf中dns设置的方法
修改NetworkManager配置 sudo vim /etc/NetworkManager/NetworkManager.conf 在[main]模块中添加
dns=none 删除软链接 sudo systemctl restart NetworkManager 重启NetworkManager后发现/etc/resolv.conf变为一个损坏的软链接
sudo rm /etc/resolv.conf sudo touch /etc/resolv.conf 编辑dns sudo vim /etc/resolv.conf 之后资料极多，不再赘述</description>
    </item>
    
  </channel>
</rss>
